{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","_this$props","this","props","item","handleChange","handleSubmit","editItem","react_default","a","createElement","className","onSubmit","type","placeholder","value","onChange","mdbreact_esm","style","borderRadius","marginTop","color","Component","TodoItem","title","handleDelete","handleEdit","onClick","TodoList","items","clearList","map","components_TodoItem","key","id","App","state","uuid","componentDidMount","listItems","localStorage","getItem","_this","setState","JSON","parse","e","target","preventDefault","newItem","updatedItems","concat","Object","toConsumableArray","setItem","stringify","console","log","filteredItems","filter","selectedItem","find","TodoInput_TodoInput","TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.839bb307.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { MDBBtn } from 'mdbreact';\r\n\r\nexport default class TodoInput extends Component {\r\n    render() {\r\n        const { item, handleChange, handleSubmit, editItem } = this.props\r\n        const btn = {\r\n            borderRadius: \"10px\",\r\n            marginTop: \"8px\"\r\n        }\r\n\r\n        return (\r\n                <div className=\"card card-body my-3\">\r\n                    <form onSubmit={handleSubmit}>\r\n                        <div className=\"input-group\">\r\n                            <div className=\"input-group-prepend\">\r\n                                <div className=\"input-group-text bg-info text-white\">\r\n                                    <i  className=\"fas fa-book\"></i>\r\n                                </div>\r\n                            </div>\r\n                            <input type=\"text\" \r\n                            className=\"form-control text-capitalize\"\r\n                            placeholder=\"Add To-do Item\"\r\n                            value={item}\r\n                            onChange={handleChange}/>\r\n                        </div>\r\n                        <MDBBtn style={btn} className=\"btn btn-block\" \r\n                        color={editItem ? \"warning\" : \"default\"} type=\"submit\" >\r\n                            {editItem ? 'Update Item' : 'Add Item'}</MDBBtn>\r\n                    </form>\r\n                </div>\r\n        )\r\n        \r\n    }\r\n}\r\n","import React, { Component} from 'react';\r\nimport { MDBBtn,MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol  } from \"mdbreact\";\r\n\r\nclass TodoItem extends Component {\r\n    render() {\r\n        const { title, handleDelete, handleEdit} = this.props;\r\n        return (\r\n            <div>\r\n                <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\r\n                    <h6>{title}</h6>\r\n                    <div className=\"todo-icon\">\r\n                        <span className=\"mx-2 text-success\" onClick={handleEdit}>\r\n                            <i className=\"fas fa-pen\"></i>\r\n                        </span>\r\n                        <span className=\"mx-2 text-danger\" onClick={handleDelete}>\r\n                            <i className=\"fas fa-trash\"></i>\r\n                        </span>\r\n                    </div>\r\n                </li>\r\n                        \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react'\r\nimport TodoItem from './TodoItem'\r\nimport { MDBBtn } from 'mdbreact'\r\n\r\nexport default class TodoList extends Component {\r\n    render() {\r\n        const {items, clearList, handleDelete, handleEdit} = this.props\r\n        const btn = {\r\n            borderRadius: \"10px\"\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <ul className=\"list-group my-5\">\r\n                    <h3 className=\"text-capitalize text-center\">To Do List</h3>\r\n                    {\r\n                        items.map(item => {\r\n                            return (\r\n                                <TodoItem \r\n                                key={item.id} \r\n                                title={item.title}\r\n                                handleDelete={()=> handleDelete(item.id)}\r\n                                handleEdit={()=> handleEdit(item.id)}\r\n                                />\r\n                            );\r\n                            \r\n                        })\r\n                    }\r\n\r\n                    <MDBBtn style={btn} onClick={clearList} color=\"danger\" className=\"btn btn-block\" type=\"submit\" >Clear List</MDBBtn>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport TodoInput from './components/TodoInput';\nimport TodoList from './components/TodoList';\nimport uuid from \"uuid\";\n\nclass App extends Component {\n  state = {\n    items:[],\n    id:uuid(),\n    item:\"\",\n    editItem:false\n   }\n\n   componentDidMount = () => {\n    const listItems = localStorage.getItem('item')\n    this.setState({items: JSON.parse(listItems) ? JSON.parse(listItems) : []})\n  }\n\n   handleChange = e => {\n    this.setState({\n      item: e.target.value\n    });\n   };\n\n   handleSubmit = (e) => {\n      e.preventDefault();\n\n      const newItem = {\n        id: this.state.id,\n        title:this.state.item\n      }\n\n      const updatedItems = [...this.state.items, newItem];\n\n      if(newItem.title === '') {\n        return\n      } else {\n        localStorage.setItem('item', JSON.stringify(updatedItems))\n      }\n\n      this.setState({\n        items:updatedItems,\n        item:'',\n        id:uuid(),\n        editItem:false\n      });\n   };\n\n  clearList = () => {\n    this.setState({\n      items:[]\n    }, () => localStorage.setItem('item', JSON.stringify(this.state.items)))\n  }\n\n  handleDelete = (id) => {\n    console.log('SUBMIT', id)\n\n    const filteredItems = this.state.items.filter(item => \n        item.id !== id)\n    this.setState({\n      items: filteredItems\n    },\n    () => {\n      localStorage.setItem('item', JSON.stringify(this.state.items))\n    }\n    )\n  }\n\n  handleEdit = id => {\n    const filteredItems = this.state.items.filter(item => \n      item.id!== id);\n\n      const selectedItem = this.state.items.find(item => item.id === id);\n      console.log(selectedItem)\n\n      this.setState({\n        items: filteredItems,\n        item: selectedItem.title,\n        editItem: true,\n        id:id\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n          <div className=\"row\">\n              <div className=\"col-10 mx-auto col-md-8 mt-4\">\n                <h3 className=\"text-capitalize text-center\"><strong>ToDo Input</strong></h3>\n                  <TodoInput \n                  item = { this.state.item}\n                  handleChange={this.handleChange}\n                  handleSubmit={this.handleSubmit}\n                  editItem={this.state.editItem}/>\n                  <TodoList \n                  items={this.state.items} \n                  clearList={this.clearList}\n                  handleDelete={this.handleDelete}\n                  handleEdit={this.handleEdit}/>\n              </div>\n          </div>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}